{
  "name": "Untar",
  "description": "A simple script to extract compressed tar files",
  "code": "package main\n\nimport (\n\t\"archive/tar\"\n\t\"bytes\"\n\t\"compress/bzip2\"\n\n\t// \"compress/gzip\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"github.com/klauspost/compress/zstd\"\n\tgzip \"github.com/klauspost/pgzip\"\n\t\"github.com/ulikunitz/xz\"\n\t\"github.com/ulikunitz/xz/lzma\"\n)\n\nvar exts = map[string]string{\n\t\".gz\":   \"gzip\",\n\t\".tgz\":  \"gzip\",\n\t\".taz\":  \"gzip\",\n\t\".bz2\":  \"bzip2\",\n\t\".tz2\":  \"bzip2\",\n\t\".tbz2\": \"bzip2\",\n\t\".tbz\":  \"bzip2\",\n\t\".xz\":   \"xz\",\n\t\".zst\":  \"zstd\",\n\t\".tzst\": \"zstd\",\n\t\".lzma\": \"lzma\",\n\t\".tlz\":  \"lzma\",\n}\n\nfunc main() {\n\tif len(os.Args) == 1 {\n\t\tfmt.Println(\"Usage: untar <filename>\")\n\t\treturn\n\t}\n\n\tfilename := os.Args[1]\n\text := filepath.Ext(filename)\n\tcompress := exts[ext]\n\n\tvar (\n\t\tbuf       bytes.Buffer\n\t\ttarReader *tar.Reader\n\t)\n\n\tdst, _ := os.Getwd()\n\tdst += filename\n\n\tswitch compress {\n\tcase \"gzip\":\n\t\treader, err := gzip.NewReader(&buf)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tdefer reader.Close()\n\t\ttarReader = tar.NewReader(reader)\n\tcase \"bzip2\":\n\t\treader := bzip2.NewReader(&buf)\n\t\ttarReader = tar.NewReader(reader)\n\tcase \"xz\":\n\t\treader, err := xz.NewReader(&buf)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\ttarReader = tar.NewReader(reader)\n\tcase \"lzma\":\n\t\treader, err := lzma.NewReader(&buf)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\ttarReader = tar.NewReader(reader)\n\tcase \"zstd\":\n\t\treader, err := zstd.NewReader(&buf)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\ttarReader = tar.NewReader(reader)\n\t}\n\n\tfor {\n\t\theader, err := tarReader.Next()\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tif header == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\ttarget := filepath.Join(dst, header.Name)\n\n\t\tswitch header.Typeflag {\n\t\tcase tar.TypeDir:\n\t\t\tif _, err := os.Stat(target); err != nil {\n\t\t\t\tif err := os.MkdirAll(target, 0755); err != nil {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"Created %s folder.\\n\", target)\n\t\t\t}\n\t\tcase tar.TypeReg:\n\t\t\tf, err := os.OpenFile(target, os.O_CREATE|os.O_RDWR, os.FileMode(header.Mode))\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\n\t\t\tif _, err := io.Copy(f, tarReader); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t\tfmt.Printf(\"Created %s file.\\n\", target)\n\t\t\tf.Close()\n\t\t}\n\t}\n}\n",
  "language": "Go",
  "date": "2025-04-26"
}
